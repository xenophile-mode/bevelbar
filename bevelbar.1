.TH bevelbar 1 "2020-09-26" "bevelbar" "User Commands"
.\" --------------------------------------------------------------------
.SH NAME
bevelbar \- X11 status bar with beveled borders
.\" --------------------------------------------------------------------
.SH SYNOPSIS
\fBbevelbar\fP [\fIOPTIONS ...\fP]
.\" --------------------------------------------------------------------
.SH DESCRIPTION
Draw an X11 status bar. The program waits for input on \fISTDIN\fP, see
format below.
.\" --------------------------------------------------------------------
.SH OPTIONS
Colors are specified as strings that can be understood by
\fBXftColorAllocName()\fP, e.g. \fB#112233\fP or \fBred\fP.
.P
Basic properties and colors:
.TP
\fB\-h\fP \fIhorizontal_position\fP
.TQ
\fB\-v\fP \fIvertical_position\fP
Specifiy the horizontal and vertical position of the bar.
\fIhorizontal_position\fP must be one of \fBleft\fP, \fBcenter\fP or
\fBright\fP. \fIvertical_position\fP must be one of \fBtop\fP or
\fBbottom\fP. Defaults to \fBcenter\fP and \fBbottom\fP.
.TP
\fB\-H\fP \fIhorizontal_margin\fP
.TQ
\fB\-V\fP \fIvertical_margin\fP
The windows' minimum distances to screen edge in number of pixels. These
options are integers. Both default values are \fB5\fP.
.TP
\fB\-b\fP \fIouter_bevel\fP
.TQ
\fB\-B\fP \fIinner_bevel\fP
Size in pixels of the bevel to draw. These options are integers. Can be
0 to not draw any bevel at all. \fIinner_bevel\fP refers to the bevel of
individual segments. Both default values are \fB2\fP.
.TP
\fB\-m\fP \fIseg_margin\fP
Segments can have a margin (both horizontally and vertically) around
them which is set by this option. This option is an integer value and
measured in pixels. Defaults to \fB1\fP.
.TP
\fB\-e\fP \fIseg_size_empty\fP
Defines the horizontal size of empty segments. This option is an integer
value and measured in pixels. Defaults to \fB7\fP.
.TP
\fB\-f\fP \fIfont\fP
Xft font descriptor. Defaults to \fBMisc Fixed:pixelsize=13:style=bold\fP.
.TP
\fB\-p\fP \fIcol_plateau\fP
Color of the \(lqplateau\(rq. This is the space between and around
segments. Defaults to \fB#a0a0a0\fP.
.TP
\fB\-o\fP \fIcol_outer_bright\fP
.TQ
\fB\-O\fP \fIcol_outer_dark\fP
Colors of the global outer border. The \(lqbright\(rq color will be used
on the left and top, the \(lqdark\(rq color will be used at the bottom
and on the right. Default values are \fB#d6d6d6\fP and \fB#535353\fP.
.TP
\fB\-C\fP
This makes \fBbevelbar\fP print its \(lqruntime configuration\(rq and
then quit. Currently, this only prints the height of the drawable area,
which depends on the font size. If you want to display images, this
option can be used to determine an appropriate image size.
.P
Following these basic options, you can define different styles.
Throughout your input data, you can switch styles. Ten styles are
available, six of which have default values (see below).
.P
You first use \fB\-s\fP \fIindex\fP to select a style to change. Style
indexes range from 0 to 9, inclusively. After that, you use \fB\-c\fP
\fIcolor\fP up to four times to change the colors of the selected style.
The colors are use like this (and in this order):
.TP
\fIcol_segment_background\fP
.TQ
\fIcol_segment_foreground\fP
Background color and text color.
.TP
\fIcol_segment_bright\fP
.TQ
\fIcol_segment_dark\fP
Similar to the colors of the global outer border, these options set the
colors of the borders of individual segments.
.P
For example, to set style \fB7\fP to a background color of \fBred\fP, a
text color of \fBgreen\fP, a bright segment color of \fByellow\fP, and a
dark segment color of \fBblack\fP, you would have to use \fB\-s 7 \-c
red \-c green \-c yellow \-c black\fP.
.P
As mentioned above, there are six predefined styles. They have the
following values:
.P
.nf
\-s 0 \-c "#cbaa94" \-c "#000000" \-c "#d6d6d6" \-c "#535353"
\-s 1 \-c "#a68b79" \-c "#000000" \-c "#535353" \-c "#d6d6d6"
\-s 2 \-c "#a0a0a0" \-c "#000000" \-c "#d6d6d6" \-c "#535353"
\-s 3 \-c "#828282" \-c "#000000" \-c "#535353" \-c "#d6d6d6"
\-s 4 \-c "#ff0000" \-c "#ffffff" \-c "#d6d6d6" \-c "#535353"
\-s 5 \-c "#ff0000" \-c "#ffffff" \-c "#535353" \-c "#d6d6d6"
.fi
.\" --------------------------------------------------------------------
.SH "INPUT FORMAT"
As soon as input is available on \fISTDIN\fP, \fBbevelbar\fP will read
one complete input block and then draw it. This means that it will block
until the block is complete. Each of the following commands must be
terminated by a newline character and must not contain any leading or
trailing white space.
.P
.IP \(bu 4
An input block starts with an integer which designates the desired
monitor to draw the following sub-block on. You can also use \fBa\fP to
draw the same input on all monitors.
.IP \(bu 4
You can now define multiple segments. Each segment will have its own
border. A segment has the format \fI<style><text>\fP (of course, this
command has to be terminated by a newline). \fIstyle\fP is an integer to
select one of the styles defined by your command line arguments. Style
indexes start at 0, so the highest usable style index is 9.
.IP \(bu 4
Instead of actual text, you can also request an empty segment using a
simple dash: \fB-\fP.
.IP \(bu 4
Alternatively, you can begin the line with \fBi\fP, followed by a
\fIstyle\fP as described above. After these two characters, a path to a
farbfeld image is expected. For image format and tools please refer to
.UR http://git.suckless.org/farbfeld/
suckless.org
.UE .
.IP \(bu 4
Multiple segments or empty segments can follow. To designate the end of
input for this monitor, you must send an \fBe\fP.
.IP \(bu 4
You can now either select another monitor and supply more input, or you
can terminate the input by sending an \fBf\fP. This final \fBf\fP causes
the bar to be redrawn.
.P
Here's an example:
.P
\f(CW
.nf
\&    0
\&    02016-01-31, current date using style 0
\&    1Using style 1 to draw this text
\&    0Back to style 0
\&    -
\&    0We have just drawn an empty segment
\&    e
\&    1
\&    0Now we're on monitor number 1, drawing with style 0
\&    e
\&    f
.fi
\fP
.P
Another example:
.P
\f(CW
.nf
\&    a
\&    0This text appears on all monitors
\&    i2/tmp/some_image.ff
\&    e
\&    f
.fi
\fP
.\" --------------------------------------------------------------------
.SH "IMAGE FILES"
As described above, you can instruct \fBbevelbar\fP to read a farbfeld
image file. It is important to understand that \fBbevelbar\fP will
probably read this file multiple times and you, as a client, do not know
when this is going to happen. This means that you \fBmust not\fP delete
the file after you \(lqsent\(rq it to \fBbevelbar\fP. Furthermore, any
updates to the image should be done atomically.
.P
A clean way to handle these issues is this:
.P
\f(CW
.nf
\&    while sleep 10
\&    do
\&        create_new_image >/tmp/my_image.new
\&        mv /tmp/my_image.{new,ff}
\&    
\&        echo a
\&        echo i0/tmp/my_image.ff
\&        echo e
\&        echo f
\&    done
.fi
\fP
.P
The image will be updated every 10 seconds. Between that, the file will
still be available. When it does get updated, the new image will first
be written to a temporary file and then renamed to the actual file name.
This is an atomic operation.
.\" --------------------------------------------------------------------
.SH ENVIRONMENT
.TP
.B DISPLAY
Target display.
.\" --------------------------------------------------------------------
.SH LICENSE
\fBbevelbar\fP is released under the MIT license. See the accompanying
\fILICENSE\fP file.
.\" --------------------------------------------------------------------
.SH HISTORY
\fBbevelbar\fP was originally written by Peter Hofmann. The project
was started in January 2016.
.\" --------------------------------------------------------------------
.SH "SEE ALSO"
.BR bevelbar-time (1)
